import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ['main.ts'],
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins],
	plugins: [{
		name: 'exclude-deps',
		setup(build) {
			// Replace cohere-ai with empty module
			build.onResolve({ filter: /^cohere-ai$/ }, args => {
				return { 
					path: 'virtual:empty',
					namespace: 'empty'
				}
			})
			build.onLoad({ filter: /.*/, namespace: 'empty' }, () => {
				return { contents: 'module.exports = {}' }
			})
			// Make readable-stream external
			build.onResolve({ filter: /^readable-stream/ }, args => {
				return { path: args.path, external: true }
			})
			// Make transformers external - complex browser compatibility
			build.onResolve({ filter: /^@xenova\/transformers/ }, args => {
				return { path: args.path, external: true }
			})
		}
	}],
	format: 'cjs',
	platform: 'node',
	target: 'es2020',
	logLevel: "info",
	sourcemap: 'inline', // Always include source maps for debugging
	minify: false, // Disable minification for readable stack traces
	treeShaking: true,
	outfile: 'main.js',
	define: {
		'global': 'globalThis',
		'process.env.NODE_ENV': JSON.stringify(prod ? 'production' : 'development'),
	},
	inject: ['./polyfills.js'],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}